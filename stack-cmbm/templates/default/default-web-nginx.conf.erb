server {
    listen 80 <%=@listen_opts%>;

    access_log <%= @access_log %>;

    location ~* (\.deploy_configuration) {
        deny all;
    }

<% if !@domain_name.nil? && !@domain_name.empty? -%>
    server_name <%=@domain_name%>;
<% end -%>

<% if @nginx_extra -%>
    <%= @nginx_extra -%>
<% end -%>

<% if @htpasswd && !@htpasswd.empty? && File.exist?(@htpasswd) -%>
    auth_basic            "Restricted";
    auth_basic_user_file  <%= @htpasswd%>;
<% end -%>

  client_max_body_size <%= node['nginx-app']['client_max_body_size'] %>;

  <% unless @nginx_local_conf.nil? -%>
  <%= render @nginx_local_conf, :local => true %>
  <% end -%>

    root <%= @doc_root%>;

    location = / {
        try_files @site @site;
    }

    #all other locations try other files first and go to our front controller if none of them exists
    location / {
        try_files $uri $uri/ @site;
    }

    location ~* \.(jpg|jpeg|gif|png|css|js|ico|txt)$ {
        # Just an empty block so it is not matched by @site below
        # See easybib/issues#417
    }

    location ~* \.(eot|ttf|woff)$ {
        add_header Access-Control-Allow-Origin *;
    }

    location @site {
        add_header        X-Cache $upstream_cache_status;
        proxy_set_header  Host $host;
        proxy_set_header  X-Real-IP         $remote_addr;
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_pass        http://unix:<%= node['stack-cmbm']['puma']['rundir']%>/<%= @app_name %>.sock:;
    }

<% unless node['nginx-app']['browser_caching'].nil? -%>
    <%= render 'partials/browser-caching.erb',
      :cookbook => 'nginx-app',
      :variables => {
        :enabled => node['nginx-app']['browser_caching']['enabled'],
        :config => node['nginx-app']['browser_caching']['config']
      }
    %>
<% end -%>

<% if @gzip -%>
gzip <%= (@gzip['enabled']) ? 'on':'off' %>;
<%= render 'generic-conf.erb', :cookbook => 'nginx-app', :variables => {
    :prefix => 'gzip',
    :config => @gzip['config']
} %>
<% end -%>

<% if !@routes_denied.nil? && !@routes_denied.empty? -%>
<%= render "partials/routes-denied.erb", :cookbook => 'nginx-app'  %>
<% end %>
}
