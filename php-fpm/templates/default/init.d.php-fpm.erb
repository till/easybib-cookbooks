#! /bin/sh

### BEGIN INIT INFO
# Provides:          php-fpm
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts php-fpm
# Description:       starts the PHP FastCGI Process Manager daemon
### END INIT INFO

# Include defaults if available
if [ -f /etc/default/php-fpm ]; then
    . /etc/default/php-fpm
fi

prefix=<%= node["php-fpm"]["prefix"]%>
exec_prefix=<%= node["php-fpm"]["exec_prefix"] %>

php_fpm_BIN=${exec_prefix}/sbin/php-fpm
php_fpm_CONF=${prefix}/etc/php-fpm.conf
php_fpm_SOCKETS=<%= node['php-fpm']['socketdir'] %>
php_fpm_PID=${prefix}/var/run/php-fpm.pid

whoami=`whoami`
runas=<%= node["php-fpm"]["user"]%>

php_opts="--fpm-config $php_fpm_CONF"

# prepare function
# todo doesn't work with pools (currently)
php_fpm_prepare () {
    mkdir -p "${php_fpm_SOCKETS}"
    chown -R $runas:$runas $php_fpm_SOCKETS
    mkdir -p <%= node["php-fpm"]["tmpdir"]%>
    chown -R $runas:$runas <%= node["php-fpm"]["tmpdir"]%>
}

php_fpm_is_running () {
    if [ ! -r $php_fpm_PID ]; then
        echo "No PID found."
        return 1
    fi

    kill -0 `cat $php_fpm_PID`
    if [ $? -gt 0 ]; then
        echo "Stale PID."
        rm $php_fpm_PID
        return 1
    fi

    return 0
}

wait_for_pid () {
    try=0

    while test $try -lt 35 ; do

        case "$1" in
            'created')
            if [ -f "$2" ] ; then
                try=''
                break
            fi
            ;;

            'removed')
            if [ ! -f "$2" ] ; then
                try=''
                break
            fi
            ;;
        esac

        echo -n .
        try=`expr $try + 1`
        sleep 1

    done

}

case "$1" in
    configtest)
        echo -n "Testing php-fpm configuration "
        $php_fpm_BIN -y $php_fpm_CONF -t
    ;;

    start)

        php_fpm_prepare

        echo -n "Starting php-fpm "

        $php_fpm_BIN $php_opts

        if [ "$?" != 0 ] ; then
            echo " failed"
            exit 1
        fi

        wait_for_pid created $php_fpm_PID

        if [ -n "$try" ] ; then
            echo " failed"
            exit 1
        fi

        if [ "$whoami" = "root" ]; then
            chown $runas $php_fpm_PID
        fi

        echo " done"
    ;;

    status)
        if php_fpm_is_running; then
            echo "php-fpm is running."
            exit 0
        fi
        echo "php-fpm is not running"
        exit 1
    ;;

    stop)
        echo -n "Gracefully shutting down php-fpm "

        if [ ! -r $php_fpm_PID ] ; then
            echo "warning, no pid file found - php-fpm is not running ?"
            exit 1
        fi

        kill -QUIT `cat $php_fpm_PID`

        wait_for_pid removed $php_fpm_PID

        if [ -n "$try" ] ; then
            echo " failed. Use force-exit"
            exit 1
        else
            echo " done"
        fi
    ;;

    force-quit)
        echo -n "Terminating php-fpm "

        if [ ! -r $php_fpm_PID ] ; then
            echo "warning, no pid file found - php-fpm is not running ?"
            exit 1
        fi

        kill -TERM `cat $php_fpm_PID`

        wait_for_pid removed $php_fpm_PID

        if [ -n "$try" ] ; then
            echo " failed"
            exit 1
        else
            echo " done"
        fi
    ;;

    restart)
        if php_fpm_is_running; then
            $0 stop
        fi
        $0 start
    ;;

    reload)

        echo -n "Reload service php-fpm "

        if [ ! -r $php_fpm_PID ] ; then
            echo "warning, no pid file found - php-fpm is not running ?"
            exit 1
        fi

        kill -USR2 `cat $php_fpm_PID`

        echo " done"
    ;;

    *)
        echo "Usage: $0 {start|stop|force-quit|restart|reload|configtest}"
        exit 1
    ;;

esac
