<%= render "haproxy.cfg.globals.erb" %>
<%= render "haproxy.cfg.backend-letsencrypt.erb", :variables => {
    'certbot_port' => node['ies-letsencrypt']['certbot']['port']
  }
%>
<%
  sub_index = node.fetch('haproxy',{}).fetch('default_layer',{})

  if node.fetch('opsworks',{}).fetch('layers', {}).fetch(sub_index, {}).fetch('instances', {}).nil? -%>
    <%= render "haproxy.cfg.fallback.erb" %>
<% else -%>
    <%= render "haproxy.cfg.backend.erb", :variables => {
        'layername' => node['haproxy']['default_layer'],
        'health_check' => "#{node['haproxy']['health_check_method']} #{node['haproxy']['health_check_url']}",
        'node' => @node
    } %>
<% end -%>

<%
if !node['haproxy']['additional_layers'].nil?
  node['haproxy']['additional_layers'].each do |layername,layerconfig|
-%>
  <%= render "haproxy.cfg.backend.erb", :variables => {
      'layername' => layername,
      'health_check' => layerconfig['health_check'],
      'node' => @node
  } %>
<%
  end
end
-%>

<%
if !node['haproxy']['forwarding_layers'].nil?
  node['haproxy']['forwarding_layers'].each do |layername,layerconfig|
-%>
  <%= render "haproxy.cfg.forwardingbackend.erb", :variables => {
      'layername' => layername,
      'health_check' => layerconfig['health_check'],
      'http_set_host' => layerconfig['http_set_host'],
      'http_set_path' => layerconfig['http_set_path'],
      'http_match_path' => layerconfig['http_match_path'],
      'haproxy_check_interval' => layerconfig['haproxy_check_interval'],
      'servers' => layerconfig['servers'],
      'node' => @node
  } %>
<%
  end
end
-%>

<%
if !node['haproxy']['websocket_layers'].nil?
  node['haproxy']['websocket_layers'].each do |layername,layerconfig|
-%>
  <%= render "haproxy.cfg.websocketbackend.erb", :variables => {
      'layername' => layername,
      'health_check' => layerconfig['health_check'],
      'port' => layerconfig['port'],
      'node' => @node
  } %>
<%
  end
end
-%>

<%= render "haproxy.cfg.frontend.erb" %>
