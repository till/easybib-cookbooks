<%
haproxy_cfg = @node.fetch('haproxy', {})
opsworks_layers = @node.fetch('opsworks', {}).fetch('layers', {})
%>
frontend http-in
  bind *:80
  <% unless haproxy_cfg.fetch('ssl', 'off') == 'off'
    certificate = "#{@node['ssl-deploy']['directory']}/cert.combined.pem"
  -%>
  bind *:443 ssl crt <%= certificate %>
  reqadd X-Forwarded-Proto:\ https if { ssl_fc }
  <% unless haproxy_cfg.fetch('hsts', nil).nil? -%>
  rspadd Strict-Transport-Security:\ max-age=<%=haproxy_cfg['hsts']%> if { ssl_fc }
  <% end
     if haproxy_cfg.fetch('ssl', 'off') == 'only' -%>
  redirect scheme https if !{ ssl_fc }
  <% end
  end -%>
  option log-separate-errors

  tcp-request inspect-delay <%= haproxy_cfg.fetch('acl', {}).fetch('inspect_delay', '30s') %>
  <% if !haproxy_cfg.fetch('acls',{}).empty? -%>
  #acls from node json:
    <% haproxy_cfg['acls'].each do |aclname,aclconfig| -%>
  #rule <%= aclname %>
  <%= aclconfig %>
    <% end -%>
  <% end -%>

  <% if !haproxy_cfg.fetch('additional_layers',{}).empty?-%>
  #additional backends:
    <% haproxy_cfg['additional_layers'].each do |layername,layerconfig| -%>
      <% if opsworks_layers.fetch(layername, {}).fetch('instances', {}).empty? -%>
  #skipping layer <%= layername %> because layer has no instances
      <% else %>
        <% layerconfig.fetch('acl',{}).each do |aclid, acl| -%>
  #rule <%= aclid %>
  acl use_<%= layername %> <%= acl %>
  use_backend <%= layername %>_php_app_servers if use_<%= layername %>
        <% end -%>
      <% end -%>
    <% end -%>
  <% end -%>

  <% if !haproxy_cfg.fetch('forwarding_layers', {}).empty?-%>
  #forwarding backends:
    <% haproxy_cfg['forwarding_layers'].each do |layername,layerconfig| -%>
        <% layerconfig.fetch('acl',{}).each do |aclid, acl| -%>
  #rule <%= aclid %>
  acl use_forward_<%= layername %> <%= acl %>
  use_backend <%= layername %>_forward if use_forward_<%= layername %>
      <% end -%>
    <% end -%>
  <% end -%>

  <% if !haproxy_cfg.fetch('websocket_layers', {}).empty?-%>
  # websocket backends
    <% haproxy_cfg['websocket_layers'].each do |layername,layerconfig| -%>
  # routing based on websocket protocol header
  acl hdr_connection_upgrade hdr(Connection)  -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket
  use_backend <%= layername %>_websocket_app_servers if hdr_connection_upgrade hdr_upgrade_websocket
    <% end -%>
  <% end -%>

  # Handle LE requests and forward them locally
  acl is_letsencrypt path_beg -i /.well-known/acme-challenge/
  use_backend letsencrypt if is_letsencrypt

  <% default_layer = haproxy_cfg.fetch('default_layer',{})
  if !opsworks_layers.fetch(default_layer, {}).fetch('instances', {}).empty? -%>
  default_backend <%= default_layer %>_php_app_servers
  <% end -%>
