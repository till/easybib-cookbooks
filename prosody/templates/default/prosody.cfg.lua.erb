-- Prosody XMPP Server Configuration
--
-- Information on configuring Prosody can be found on our
-- website at http://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running: luac -p prosody.cfg.lua
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--

---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see http://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
<% if !@admins.empty? -%>
admins = { <%= @admins.map {|email| %Q{"#{email}"}}.join(", ") -%> }
<% end -%>

-- Hashed password storage: http://prosody.im/doc/modules/mod_auth_internal_hashed
authentication = "internal_hashed"

-- Enable use of libevent for better performance under high load
-- For more information see: http://prosody.im/doc/libevent
use_libevent = true;

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation on modules can be found at: http://prosody.im/doc/modules
modules_enabled = {

    -- Generally required
        "roster"; -- Allow users to have a roster. Recommended ;)
        "saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
        "tls"; -- Add support for secure TLS on c2s/s2s connections
        "dialback"; -- s2s dialback support
        "disco"; -- Service discovery

    -- Not essential, but recommended
        "private"; -- Private XML storage (for room bookmarks, etc.)
        "vcard"; -- Allow users to set vCards
        "privacy"; -- Support privacy lists
        "compression"; -- Stream compression

    -- Nice to have
        "legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
        "version"; -- Replies to server version requests
        "uptime"; -- Report how long server has been running
        "time"; -- Let others know the time here on this server
        "ping"; -- Replies to XMPP pings with pongs
        "pep"; -- Enables users to publish their mood, activity, playing music and more
        "register"; -- Allow users to register on this server using a client and change passwords
        "adhoc"; -- Support for "ad-hoc commands" that can be executed with an XMPP client

    -- Admin interfaces
        "admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
        "admin_telnet"; -- Opens telnet console interface on localhost port 5582
        --"admin_web";

    -- Other specific functionality
        "posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
        --"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
        --"httpserver"; -- Serve static files from a directory over HTTP
        "groups"; -- Shared roster support
        "announce"; -- Send announcement to all online users
        --"welcome"; -- Welcome users who register accounts
        --"watchregistrations"; -- Alert admins of registrations
        --"motd"; -- Send a message to users when they log in
};

-- These modules are auto-loaded, should you
-- (for some mad reason) want to disable
-- them then uncomment them below
modules_disabled = {
    -- "presence"; -- Route user/contact status information
    -- "message"; -- Route messages
    -- "iq"; -- Route info queries
    -- "offline"; -- Store offline messages
};

-- Disable account creation by default, for security
-- For more information see http://prosody.im/doc/creating_accounts
allow_registration = false;

-- These are the SSL/TLS-related settings. If you don't want
-- to use SSL/TLS, you may comment or remove this
ssl = {
    key = "/etc/prosody/certs/cert.key";
    certificate = "/etc/prosody/certs/cert.pem";
}

-- Only allow encrypted streams? Encryption is already used when
-- available. These options will cause Prosody to deny connections that
-- are not encrypted. Note that some servers do not support s2s
-- encryption or have it disabled, including gmail.com and Google Apps
-- domains.

c2s_require_encryption = true
--s2s_require_encryption = false

storage = "<%= @storage -%>"

<%
Chef::Log.info("DRIVER DRIVER -- #{@db["driver"]}")
if @storage == 'sql'
  if @db["driver"] == "MySQL" or @db["driver"] == "PostgreSQL"
-%>
sql = {
    driver = "<%= @db["driver"] -%>",
    database = "<%= @db["database"] -%>",
    username = "<%= @db["username"] -%>",
    password = "<%= @db["password"] -%>",
    host = "<%= @db["hostname"] -%>"
}

<%
  end
  if @db["driver"] == "SQLite3"
-%>
sql = {
    driver = "SQLite3",
    database = "<%= @db["database"] -%>"
}
<%
  end
end
-%>

-- Logging configuration
-- For advanced logging see http://prosody.im/doc/logging
-- Hint: If you create a new log file or rename them, don't forget
-- to update the logrotate config at /etc/logrotate.d/prosody
log = {
        -- Log all error messages to prosody.err
        error = "/var/log/prosody/prosody.err";
        -- Log everything of level "info" and higher (that is, all except "debug" messages)
        -- to prosody.log
        info = "/var/log/prosody/prosody.log"; -- Change 'info' to 'debug' for more verbose logging
        debug = "/var/log/prosody/prosody.dbg"; 
        --"*syslog"; -- Uncomment this for logging to syslog
}

-- Pidfile, used by prosodyctl and the init.d script
pidfile = "/var/run/prosody/prosody.pid";

----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
-- Settings under each VirtualHost entry apply *only* to that host.

<% if @domains.empty? -%>
VirtualHost "localhost"
<% end %>

<% @domains.each do |domain| -%>
VirtualHost "<%= domain %>"
    enabled = true
<% end %>

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.
-- For more information on components, see http://prosody.im/doc/components

---Set up a MUC (multi-user chat) room server and proxy65:
<% @domains.each do |domain| -%>
Component "conference.<%= domain %>" "muc"
Component "proxy.<%= domain %>" "proxy65"
<% end -%>